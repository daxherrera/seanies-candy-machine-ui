{"ast":null,"code":"var _jsxFileName = \"/Users/admin/Projects/my-generative-nfts/metaplex/js/packages/candy-machine-ui/src/Home.tsx\",\n    _s = $RefreshSig$();\n\nimport { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport { awaitTransactionSignatureConfirmation, CANDY_MACHINE_PROGRAM, getCandyMachineState, mintOneToken, getCollectionPDA, createAccountsForMint } from './candy-machine';\nimport { toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n_c = ConnectButton;\nconst MintContainer = styled.div``; // add your owns styles here\n\n_c2 = MintContainer;\n\nconst Home = props => {\n  _s();\n\n  var _candyMachine$state, _candyMachine$state2, _candyMachine$state2$;\n\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState();\n  const [alertState, setAlertState] = useState({\n    open: false,\n    message: '',\n    severity: undefined\n  });\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState();\n  const [itemsRemaining, setItemsRemaining] = useState();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState();\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n  const anchorWallet = useMemo(() => {\n    if (!wallet || !wallet.publicKey || !wallet.signAllTransactions || !wallet.signTransaction) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction\n    };\n  }, [wallet]);\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        var _cndy$state$goLiveDat, _cndy$state$endSettin, _cndy$state$endSettin2, _cndy$state$whitelist, _cndy$state$whitelist2, _cndy$state$gatekeepe;\n\n        const cndy = await getCandyMachineState(anchorWallet, props.candyMachineId, props.connection);\n        let active = (cndy === null || cndy === void 0 ? void 0 : (_cndy$state$goLiveDat = cndy.state.goLiveDate) === null || _cndy$state$goLiveDat === void 0 ? void 0 : _cndy$state$goLiveDat.toNumber()) < new Date().getTime() / 1000;\n        let presale = false; // whitelist mint?\n\n        if (cndy !== null && cndy !== void 0 && cndy.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (cndy.state.whitelistMintSettings.presale && (!cndy.state.goLiveDate || cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)) {\n            presale = true;\n          } // is there a discount?\n\n\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined); // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          } // retrieves the whitelist token\n\n\n          const mint = new anchor.web3.PublicKey(cndy.state.whitelistMintSettings.mint);\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(token);\n            let valid = parseInt(balance.value.amount) > 0; // only whitelist the user if the balance > 0\n\n            setIsWhitelistUser(valid);\n            active = presale && valid || active;\n          } catch (e) {\n            setIsWhitelistUser(false); // no whitelist user, no mint\n\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        } // datetime to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin = cndy.state.endSettings) !== null && _cndy$state$endSettin !== void 0 && _cndy$state$endSettin.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n\n          if (cndy.state.endSettings.number.toNumber() < new Date().getTime() / 1000) {\n            active = false;\n          }\n        } // amount to stop the mint?\n\n\n        if (cndy !== null && cndy !== void 0 && (_cndy$state$endSettin2 = cndy.state.endSettings) !== null && _cndy$state$endSettin2 !== void 0 && _cndy$state$endSettin2.endSettingType.amount) {\n          let limit = Math.min(cndy.state.endSettings.number.toNumber(), cndy.state.itemsAvailable);\n\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount = await cndy.program.provider.connection.getAccountInfo(collectionPDA);\n        setIsActive(cndy.state.isActive = active);\n        setIsPresale(cndy.state.isPresale = presale);\n        setCandyMachine(cndy);\n        const txnEstimate = 892 + (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) + (cndy.state.tokenMint ? 177 : 0) + (cndy.state.whitelistMintSettings ? 33 : 0) + ((_cndy$state$whitelist = cndy.state.whitelistMintSettings) !== null && _cndy$state$whitelist !== void 0 && (_cndy$state$whitelist2 = _cndy$state$whitelist.mode) !== null && _cndy$state$whitelist2 !== void 0 && _cndy$state$whitelist2.burnEveryTime ? 145 : 0) + (cndy.state.gatekeeper ? 33 : 0) + ((_cndy$state$gatekeepe = cndy.state.gatekeeper) !== null && _cndy$state$gatekeepe !== void 0 && _cndy$state$gatekeepe.expireOnUse ? 66 : 0);\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: 'error',\n              noHide: true\n            });\n          } else if (e.message.startsWith('failed to get info about account')) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: 'error',\n              noHide: true\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: 'error',\n            noHide: true\n          });\n        }\n\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: 'error',\n        noHide: true\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection, props.rpcHost]);\n\n  const onMint = async function () {\n    let beforeTransactions = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    let afterTransactions = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n\n    try {\n      var _document$getElementB;\n\n      setIsUserMinting(true);\n      (_document$getElementB = document.getElementById('#identity')) === null || _document$getElementB === void 0 ? void 0 : _document$getElementB.click();\n\n      if (wallet.connected && candyMachine !== null && candyMachine !== void 0 && candyMachine.program && wallet.publicKey) {\n        var _setupMint;\n\n        let setupMint;\n\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info'\n          });\n          setupMint = await createAccountsForMint(candyMachine, wallet.publicKey);\n          let status = {\n            err: true\n          };\n\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(setupMint.transaction, props.txTimeout, props.connection, true);\n          }\n\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message: 'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info'\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error'\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info'\n          });\n        }\n\n        let mintOne = await mintOneToken(candyMachine, wallet.publicKey, beforeTransactions, afterTransactions, (_setupMint = setupMint) !== null && _setupMint !== void 0 ? _setupMint : setupTxn);\n        const mintTxId = mintOne[0];\n        let status = {\n          err: true\n        };\n\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(mintTxId, props.txTimeout, props.connection, true);\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining - 1;\n          setItemsRemaining(remaining);\n          setIsActive(candyMachine.state.isActive = remaining > 0);\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success'\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error'\n          });\n        }\n      }\n    } catch (error) {\n      let message = error.msg || 'Minting failed! Please try again!';\n\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error'\n      }); // updates the candy machine state to reflect the latest\n      // information on chain\n\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() <= new Date().getTime() / 1000) {\n      setIsPresale(candyMachine.state.isPresale = false);\n    }\n\n    setIsActive(candyMachine.state.isActive = active);\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [anchorWallet, props.candyMachineId, props.connection, refreshCandyMachineState]);\n  return /*#__PURE__*/_jsxDEV(Container, {\n    style: {\n      marginTop: 100\n    },\n    children: [/*#__PURE__*/_jsxDEV(Container, {\n      maxWidth: \"xs\",\n      style: {\n        position: 'relative'\n      },\n      children: /*#__PURE__*/_jsxDEV(Paper, {\n        style: {\n          padding: 24,\n          paddingBottom: 10,\n          backgroundColor: '#151A1F',\n          borderRadius: 6\n        },\n        children: [!wallet.connected ? /*#__PURE__*/_jsxDEV(ConnectButton, {\n          children: \"Connect Wallet\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 403,\n          columnNumber: 13\n        }, this) : /*#__PURE__*/_jsxDEV(_Fragment, {\n          children: [candyMachine && /*#__PURE__*/_jsxDEV(Grid, {\n            container: true,\n            direction: \"row\",\n            justifyContent: \"center\",\n            wrap: \"nowrap\",\n            children: [/*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 3,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: \"Remaining\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 414,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: `${itemsRemaining}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 417,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 413,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 4,\n              children: [/*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"body2\",\n                color: \"textSecondary\",\n                children: isWhitelistUser && discountPrice ? 'Discount Price' : 'Price'\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 428,\n                columnNumber: 21\n              }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                variant: \"h6\",\n                color: \"textPrimary\",\n                style: {\n                  fontWeight: 'bold'\n                },\n                children: isWhitelistUser && discountPrice ? `◎ ${formatNumber.asNumber(discountPrice)}` : `◎ ${formatNumber.asNumber(candyMachine.state.price)}`\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 433,\n                columnNumber: 21\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 427,\n              columnNumber: 19\n            }, this), /*#__PURE__*/_jsxDEV(Grid, {\n              item: true,\n              xs: 5,\n              children: isActive && endDate && Date.now() < endDate.getTime() ? /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                  date: getCountdownDate(candyMachine),\n                  style: {\n                    justifyContent: 'flex-end'\n                  },\n                  status: \"COMPLETED\",\n                  onComplete: toggleMintButton\n                }, \"endSettings\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 448,\n                  columnNumber: 25\n                }, this), /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  align: \"center\",\n                  display: \"block\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"TO END OF MINT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 455,\n                  columnNumber: 25\n                }, this)]\n              }, void 0, true) : /*#__PURE__*/_jsxDEV(_Fragment, {\n                children: [/*#__PURE__*/_jsxDEV(MintCountdown, {\n                  date: getCountdownDate(candyMachine),\n                  style: {\n                    justifyContent: 'flex-end'\n                  },\n                  status: candyMachine !== null && candyMachine !== void 0 && (_candyMachine$state = candyMachine.state) !== null && _candyMachine$state !== void 0 && _candyMachine$state.isSoldOut || endDate && Date.now() > endDate.getTime() ? 'COMPLETED' : isPresale ? 'PRESALE' : 'LIVE',\n                  onComplete: toggleMintButton\n                }, \"goLive\", false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 466,\n                  columnNumber: 25\n                }, this), isPresale && candyMachine.state.goLiveDate && candyMachine.state.goLiveDate.toNumber() > new Date().getTime() / 1000 && /*#__PURE__*/_jsxDEV(Typography, {\n                  variant: \"caption\",\n                  align: \"center\",\n                  display: \"block\",\n                  style: {\n                    fontWeight: 'bold'\n                  },\n                  children: \"UNTIL PUBLIC MINT\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 484,\n                  columnNumber: 29\n                }, this)]\n              }, void 0, true)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 445,\n              columnNumber: 19\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(MintContainer, {\n            children: candyMachine !== null && candyMachine !== void 0 && candyMachine.state.isActive && candyMachine !== null && candyMachine !== void 0 && candyMachine.state.gatekeeper && wallet.publicKey && wallet.signTransaction ? /*#__PURE__*/_jsxDEV(GatewayProvider, {\n              wallet: {\n                publicKey: wallet.publicKey || new PublicKey(CANDY_MACHINE_PROGRAM),\n                //@ts-ignore\n                signTransaction: wallet.signTransaction\n              },\n              gatekeeperNetwork: candyMachine === null || candyMachine === void 0 ? void 0 : (_candyMachine$state2 = candyMachine.state) === null || _candyMachine$state2 === void 0 ? void 0 : (_candyMachine$state2$ = _candyMachine$state2.gatekeeper) === null || _candyMachine$state2$ === void 0 ? void 0 : _candyMachine$state2$.gatekeeperNetwork,\n              clusterUrl: rpcUrl,\n              handleTransaction: async transaction => {\n                setIsUserMinting(true);\n                const userMustSign = transaction.signatures.find(sig => sig.publicKey.equals(wallet.publicKey));\n\n                if (userMustSign) {\n                  setAlertState({\n                    open: true,\n                    message: 'Please sign one-time Civic Pass issuance',\n                    severity: 'info'\n                  });\n\n                  try {\n                    transaction = await wallet.signTransaction(transaction);\n                  } catch (e) {\n                    setAlertState({\n                      open: true,\n                      message: 'User cancelled signing',\n                      severity: 'error'\n                    }); // setTimeout(() => window.location.reload(), 2000);\n\n                    setIsUserMinting(false);\n                    throw e;\n                  }\n                } else {\n                  setAlertState({\n                    open: true,\n                    message: 'Refreshing Civic Pass',\n                    severity: 'info'\n                  });\n                }\n\n                try {\n                  await sendTransaction(props.connection, wallet, transaction, [], true, 'confirmed');\n                  setAlertState({\n                    open: true,\n                    message: 'Please sign minting',\n                    severity: 'info'\n                  });\n                } catch (e) {\n                  setAlertState({\n                    open: true,\n                    message: 'Solana dropped the transaction, please try again',\n                    severity: 'warning'\n                  });\n                  console.error(e); // setTimeout(() => window.location.reload(), 2000);\n\n                  setIsUserMinting(false);\n                  throw e;\n                }\n\n                await onMint();\n              },\n              broadcastTransaction: false,\n              options: {\n                autoShowModal: false\n              },\n              children: /*#__PURE__*/_jsxDEV(MintButton, {\n                candyMachine: candyMachine,\n                isMinting: isUserMinting,\n                setIsMinting: val => setIsUserMinting(val),\n                onMint: onMint,\n                isActive: isActive || isPresale && isWhitelistUser\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 578,\n                columnNumber: 21\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 503,\n              columnNumber: 19\n            }, this) : /*#__PURE__*/_jsxDEV(MintButton, {\n              candyMachine: candyMachine,\n              isMinting: isUserMinting,\n              setIsMinting: val => setIsUserMinting(val),\n              onMint: onMint,\n              isActive: isActive || isPresale && isWhitelistUser\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 587,\n              columnNumber: 19\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 498,\n            columnNumber: 15\n          }, this)]\n        }, void 0, true), /*#__PURE__*/_jsxDEV(Typography, {\n          variant: \"caption\",\n          align: \"center\",\n          display: \"block\",\n          style: {\n            marginTop: 7,\n            color: 'grey'\n          },\n          children: \"Powered by METAPLEX\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 598,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 394,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 393,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Snackbar, {\n      open: alertState.open,\n      autoHideDuration: alertState.noHide ? null : 6000,\n      onClose: () => setAlertState({ ...alertState,\n        open: false\n      }),\n      children: /*#__PURE__*/_jsxDEV(Alert, {\n        onClose: () => setAlertState({ ...alertState,\n          open: false\n        }),\n        severity: alertState.severity,\n        children: alertState.message\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 614,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 609,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 392,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Home, \"try2Fr1rO0OIK7PpQSfsK9TsFgU=\", false, function () {\n  return [useWallet];\n});\n\n_c3 = Home;\n\nconst getCountdownDate = candyMachine => {\n  var _candyMachine$state$e;\n\n  if (candyMachine.state.isActive && (_candyMachine$state$e = candyMachine.state.endSettings) !== null && _candyMachine$state$e !== void 0 && _candyMachine$state$e.endSettingType.date) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(candyMachine.state.goLiveDate ? candyMachine.state.goLiveDate : candyMachine.state.isPresale ? new anchor.BN(new Date().getTime() / 1000) : undefined);\n};\n\nexport default Home;\n\nvar _c, _c2, _c3;\n\n$RefreshReg$(_c, \"ConnectButton\");\n$RefreshReg$(_c2, \"MintContainer\");\n$RefreshReg$(_c3, \"Home\");","map":{"version":3,"sources":["/Users/admin/Projects/my-generative-nfts/metaplex/js/packages/candy-machine-ui/src/Home.tsx"],"names":["useEffect","useMemo","useState","useCallback","anchor","styled","Container","Snackbar","Paper","Alert","Grid","Typography","PublicKey","useWallet","WalletDialogButton","awaitTransactionSignatureConfirmation","CANDY_MACHINE_PROGRAM","getCandyMachineState","mintOneToken","getCollectionPDA","createAccountsForMint","toDate","formatNumber","getAtaForMint","MintCountdown","MintButton","GatewayProvider","sendTransaction","ConnectButton","MintContainer","div","Home","props","isUserMinting","setIsUserMinting","candyMachine","setCandyMachine","alertState","setAlertState","open","message","severity","undefined","isActive","setIsActive","endDate","setEndDate","itemsRemaining","setItemsRemaining","isWhitelistUser","setIsWhitelistUser","isPresale","setIsPresale","discountPrice","setDiscountPrice","needTxnSplit","setNeedTxnSplit","setupTxn","setSetupTxn","rpcUrl","rpcHost","wallet","anchorWallet","publicKey","signAllTransactions","signTransaction","refreshCandyMachineState","candyMachineId","cndy","connection","active","state","goLiveDate","toNumber","Date","getTime","presale","whitelistMintSettings","isWhitelistOnly","mint","web3","token","balance","getTokenAccountBalance","valid","parseInt","value","amount","e","console","log","endSettings","endSettingType","date","number","limit","Math","min","itemsAvailable","itemsRedeemed","isSoldOut","collectionPDA","collectionPDAAccount","program","provider","getAccountInfo","txnEstimate","retainAuthority","tokenMint","mode","burnEveryTime","gatekeeper","expireOnUse","Error","noHide","startsWith","onMint","beforeTransactions","afterTransactions","document","getElementById","click","connected","setupMint","status","err","transaction","txTimeout","mintOne","mintTxId","remaining","error","msg","indexOf","code","window","location","reload","toggleMintButton","now","marginTop","position","padding","paddingBottom","backgroundColor","borderRadius","fontWeight","asNumber","price","getCountdownDate","justifyContent","gatekeeperNetwork","userMustSign","signatures","find","sig","equals","autoShowModal","val","color","BN"],"mappings":"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","sourcesContent":["import { useEffect, useMemo, useState, useCallback } from 'react';\nimport * as anchor from '@project-serum/anchor';\n\nimport styled from 'styled-components';\nimport { Container, Snackbar } from '@material-ui/core';\nimport Paper from '@material-ui/core/Paper';\nimport Alert from '@material-ui/lab/Alert';\nimport Grid from '@material-ui/core/Grid';\nimport Typography from '@material-ui/core/Typography';\nimport { PublicKey, Transaction } from '@solana/web3.js';\nimport { useWallet } from '@solana/wallet-adapter-react';\nimport { WalletDialogButton } from '@solana/wallet-adapter-material-ui';\nimport {\n  awaitTransactionSignatureConfirmation,\n  CandyMachineAccount,\n  CANDY_MACHINE_PROGRAM,\n  getCandyMachineState,\n  mintOneToken,\n  getCollectionPDA,\n  SetupState,\n  createAccountsForMint,\n} from './candy-machine';\nimport { AlertState, toDate, formatNumber, getAtaForMint } from './utils';\nimport { MintCountdown } from './MintCountdown';\nimport { MintButton } from './MintButton';\nimport { GatewayProvider } from '@civic/solana-gateway-react';\nimport { sendTransaction } from './connection';\n\nconst ConnectButton = styled(WalletDialogButton)`\n  width: 100%;\n  height: 60px;\n  margin-top: 10px;\n  margin-bottom: 5px;\n  background: linear-gradient(180deg, #604ae5 0%, #813eee 100%);\n  color: white;\n  font-size: 16px;\n  font-weight: bold;\n`;\n\nconst MintContainer = styled.div``; // add your owns styles here\n\nexport interface HomeProps {\n  candyMachineId?: anchor.web3.PublicKey;\n  connection: anchor.web3.Connection;\n  txTimeout: number;\n  rpcHost: string;\n}\n\nconst Home = (props: HomeProps) => {\n  const [isUserMinting, setIsUserMinting] = useState(false);\n  const [candyMachine, setCandyMachine] = useState<CandyMachineAccount>();\n  const [alertState, setAlertState] = useState<AlertState>({\n    open: false,\n    message: '',\n    severity: undefined,\n  });\n\n  const [isActive, setIsActive] = useState(false);\n  const [endDate, setEndDate] = useState<Date>();\n  const [itemsRemaining, setItemsRemaining] = useState<number>();\n  const [isWhitelistUser, setIsWhitelistUser] = useState(false);\n  const [isPresale, setIsPresale] = useState(false);\n  const [discountPrice, setDiscountPrice] = useState<anchor.BN>();\n  const [needTxnSplit, setNeedTxnSplit] = useState(true);\n  const [setupTxn, setSetupTxn] = useState<SetupState>();\n\n  const rpcUrl = props.rpcHost;\n  const wallet = useWallet();\n\n  const anchorWallet = useMemo(() => {\n    if (\n      !wallet ||\n      !wallet.publicKey ||\n      !wallet.signAllTransactions ||\n      !wallet.signTransaction\n    ) {\n      return;\n    }\n\n    return {\n      publicKey: wallet.publicKey,\n      signAllTransactions: wallet.signAllTransactions,\n      signTransaction: wallet.signTransaction,\n    } as anchor.Wallet;\n  }, [wallet]);\n\n  const refreshCandyMachineState = useCallback(async () => {\n    if (!anchorWallet) {\n      return;\n    }\n\n    if (props.candyMachineId) {\n      try {\n        const cndy = await getCandyMachineState(\n          anchorWallet,\n          props.candyMachineId,\n          props.connection,\n        );\n        let active =\n          cndy?.state.goLiveDate?.toNumber() < new Date().getTime() / 1000;\n        let presale = false;\n        // whitelist mint?\n        if (cndy?.state.whitelistMintSettings) {\n          // is it a presale mint?\n          if (\n            cndy.state.whitelistMintSettings.presale &&\n            (!cndy.state.goLiveDate ||\n              cndy.state.goLiveDate.toNumber() > new Date().getTime() / 1000)\n          ) {\n            presale = true;\n          }\n          // is there a discount?\n          if (cndy.state.whitelistMintSettings.discountPrice) {\n            setDiscountPrice(cndy.state.whitelistMintSettings.discountPrice);\n          } else {\n            setDiscountPrice(undefined);\n            // when presale=false and discountPrice=null, mint is restricted\n            // to whitelist users only\n            if (!cndy.state.whitelistMintSettings.presale) {\n              cndy.state.isWhitelistOnly = true;\n            }\n          }\n          // retrieves the whitelist token\n          const mint = new anchor.web3.PublicKey(\n            cndy.state.whitelistMintSettings.mint,\n          );\n          const token = (await getAtaForMint(mint, anchorWallet.publicKey))[0];\n\n          try {\n            const balance = await props.connection.getTokenAccountBalance(\n              token,\n            );\n            let valid = parseInt(balance.value.amount) > 0;\n            // only whitelist the user if the balance > 0\n            setIsWhitelistUser(valid);\n            active = (presale && valid) || active;\n          } catch (e) {\n            setIsWhitelistUser(false);\n            // no whitelist user, no mint\n            if (cndy.state.isWhitelistOnly) {\n              active = false;\n            }\n            console.log('There was a problem fetching whitelist token balance');\n            console.log(e);\n          }\n        }\n        // datetime to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.date) {\n          setEndDate(toDate(cndy.state.endSettings.number));\n          if (\n            cndy.state.endSettings.number.toNumber() <\n            new Date().getTime() / 1000\n          ) {\n            active = false;\n          }\n        }\n        // amount to stop the mint?\n        if (cndy?.state.endSettings?.endSettingType.amount) {\n          let limit = Math.min(\n            cndy.state.endSettings.number.toNumber(),\n            cndy.state.itemsAvailable,\n          );\n          if (cndy.state.itemsRedeemed < limit) {\n            setItemsRemaining(limit - cndy.state.itemsRedeemed);\n          } else {\n            setItemsRemaining(0);\n            cndy.state.isSoldOut = true;\n          }\n        } else {\n          setItemsRemaining(cndy.state.itemsRemaining);\n        }\n\n        if (cndy.state.isSoldOut) {\n          active = false;\n        }\n\n        const [collectionPDA] = await getCollectionPDA(props.candyMachineId);\n        const collectionPDAAccount =\n          await cndy.program.provider.connection.getAccountInfo(collectionPDA);\n\n        setIsActive((cndy.state.isActive = active));\n        setIsPresale((cndy.state.isPresale = presale));\n        setCandyMachine(cndy);\n\n        const txnEstimate =\n          892 +\n          (!!collectionPDAAccount && cndy.state.retainAuthority ? 182 : 0) +\n          (cndy.state.tokenMint ? 177 : 0) +\n          (cndy.state.whitelistMintSettings ? 33 : 0) +\n          (cndy.state.whitelistMintSettings?.mode?.burnEveryTime ? 145 : 0) +\n          (cndy.state.gatekeeper ? 33 : 0) +\n          (cndy.state.gatekeeper?.expireOnUse ? 66 : 0);\n\n        setNeedTxnSplit(txnEstimate > 1230);\n      } catch (e) {\n        if (e instanceof Error) {\n          if (e.message === `Account does not exist ${props.candyMachineId}`) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state from candy machine with address: ${props.candyMachineId}, using rpc: ${props.rpcHost}! You probably typed the REACT_APP_CANDY_MACHINE_ID value in wrong in your .env file, or you are using the wrong RPC!`,\n              severity: 'error',\n              noHide: true,\n            });\n          } else if (e.message.startsWith('failed to get info about account')) {\n            setAlertState({\n              open: true,\n              message: `Couldn't fetch candy machine state with rpc: ${props.rpcHost}! This probably means you have an issue with the REACT_APP_SOLANA_RPC_HOST value in your .env file, or you are not using a custom RPC!`,\n              severity: 'error',\n              noHide: true,\n            });\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: `${e}`,\n            severity: 'error',\n            noHide: true,\n          });\n        }\n        console.log(e);\n      }\n    } else {\n      setAlertState({\n        open: true,\n        message: `Your REACT_APP_CANDY_MACHINE_ID value in the .env file doesn't look right! Make sure you enter it in as plain base-58 address!`,\n        severity: 'error',\n        noHide: true,\n      });\n    }\n  }, [anchorWallet, props.candyMachineId, props.connection, props.rpcHost]);\n\n  const onMint = async (\n    beforeTransactions: Transaction[] = [],\n    afterTransactions: Transaction[] = [],\n  ) => {\n    try {\n      setIsUserMinting(true);\n      document.getElementById('#identity')?.click();\n      if (wallet.connected && candyMachine?.program && wallet.publicKey) {\n        let setupMint: SetupState | undefined;\n        if (needTxnSplit && setupTxn === undefined) {\n          setAlertState({\n            open: true,\n            message: 'Please sign account setup transaction',\n            severity: 'info',\n          });\n          setupMint = await createAccountsForMint(\n            candyMachine,\n            wallet.publicKey,\n          );\n          let status: any = { err: true };\n          if (setupMint.transaction) {\n            status = await awaitTransactionSignatureConfirmation(\n              setupMint.transaction,\n              props.txTimeout,\n              props.connection,\n              true,\n            );\n          }\n          if (status && !status.err) {\n            setSetupTxn(setupMint);\n            setAlertState({\n              open: true,\n              message:\n                'Setup transaction succeeded! Please sign minting transaction',\n              severity: 'info',\n            });\n          } else {\n            setAlertState({\n              open: true,\n              message: 'Mint failed! Please try again!',\n              severity: 'error',\n            });\n            setIsUserMinting(false);\n            return;\n          }\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Please sign minting transaction',\n            severity: 'info',\n          });\n        }\n\n        let mintOne = await mintOneToken(\n          candyMachine,\n          wallet.publicKey,\n          beforeTransactions,\n          afterTransactions,\n          setupMint ?? setupTxn,\n        );\n        const mintTxId = mintOne[0];\n\n        let status: any = { err: true };\n        if (mintTxId) {\n          status = await awaitTransactionSignatureConfirmation(\n            mintTxId,\n            props.txTimeout,\n            props.connection,\n            true,\n          );\n        }\n\n        if (status && !status.err) {\n          // manual update since the refresh might not detect\n          // the change immediately\n          let remaining = itemsRemaining! - 1;\n          setItemsRemaining(remaining);\n          setIsActive((candyMachine.state.isActive = remaining > 0));\n          candyMachine.state.isSoldOut = remaining === 0;\n          setSetupTxn(undefined);\n          setAlertState({\n            open: true,\n            message: 'Congratulations! Mint succeeded!',\n            severity: 'success',\n          });\n        } else {\n          setAlertState({\n            open: true,\n            message: 'Mint failed! Please try again!',\n            severity: 'error',\n          });\n        }\n      }\n    } catch (error: any) {\n      let message = error.msg || 'Minting failed! Please try again!';\n      if (!error.msg) {\n        if (!error.message) {\n          message = 'Transaction timeout! Please try again.';\n        } else if (error.message.indexOf('0x137')) {\n          console.log(error);\n          message = `SOLD OUT!`;\n        } else if (error.message.indexOf('0x135')) {\n          message = `Insufficient funds to mint. Please fund your wallet.`;\n        }\n      } else {\n        if (error.code === 311) {\n          console.log(error);\n          message = `SOLD OUT!`;\n          window.location.reload();\n        } else if (error.code === 312) {\n          message = `Minting period hasn't started yet.`;\n        }\n      }\n\n      setAlertState({\n        open: true,\n        message,\n        severity: 'error',\n      });\n      // updates the candy machine state to reflect the latest\n      // information on chain\n      refreshCandyMachineState();\n    } finally {\n      setIsUserMinting(false);\n    }\n  };\n\n  const toggleMintButton = () => {\n    let active = !isActive || isPresale;\n\n    if (active) {\n      if (candyMachine!.state.isWhitelistOnly && !isWhitelistUser) {\n        active = false;\n      }\n      if (endDate && Date.now() >= endDate.getTime()) {\n        active = false;\n      }\n    }\n\n    if (\n      isPresale &&\n      candyMachine!.state.goLiveDate &&\n      candyMachine!.state.goLiveDate.toNumber() <= new Date().getTime() / 1000\n    ) {\n      setIsPresale((candyMachine!.state.isPresale = false));\n    }\n\n    setIsActive((candyMachine!.state.isActive = active));\n  };\n\n  useEffect(() => {\n    refreshCandyMachineState();\n  }, [\n    anchorWallet,\n    props.candyMachineId,\n    props.connection,\n    refreshCandyMachineState,\n  ]);\n\n  return (\n    <Container style={{ marginTop: 100 }}>\n      <Container maxWidth=\"xs\" style={{ position: 'relative' }}>\n        <Paper\n          style={{\n            padding: 24,\n            paddingBottom: 10,\n            backgroundColor: '#151A1F',\n            borderRadius: 6,\n          }}\n        >\n          {!wallet.connected ? (\n            <ConnectButton>Connect Wallet</ConnectButton>\n          ) : (\n            <>\n              {candyMachine && (\n                <Grid\n                  container\n                  direction=\"row\"\n                  justifyContent=\"center\"\n                  wrap=\"nowrap\"\n                >\n                  <Grid item xs={3}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      Remaining\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{\n                        fontWeight: 'bold',\n                      }}\n                    >\n                      {`${itemsRemaining}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={4}>\n                    <Typography variant=\"body2\" color=\"textSecondary\">\n                      {isWhitelistUser && discountPrice\n                        ? 'Discount Price'\n                        : 'Price'}\n                    </Typography>\n                    <Typography\n                      variant=\"h6\"\n                      color=\"textPrimary\"\n                      style={{ fontWeight: 'bold' }}\n                    >\n                      {isWhitelistUser && discountPrice\n                        ? `◎ ${formatNumber.asNumber(discountPrice)}`\n                        : `◎ ${formatNumber.asNumber(\n                            candyMachine.state.price,\n                          )}`}\n                    </Typography>\n                  </Grid>\n                  <Grid item xs={5}>\n                    {isActive && endDate && Date.now() < endDate.getTime() ? (\n                      <>\n                        <MintCountdown\n                          key=\"endSettings\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status=\"COMPLETED\"\n                          onComplete={toggleMintButton}\n                        />\n                        <Typography\n                          variant=\"caption\"\n                          align=\"center\"\n                          display=\"block\"\n                          style={{ fontWeight: 'bold' }}\n                        >\n                          TO END OF MINT\n                        </Typography>\n                      </>\n                    ) : (\n                      <>\n                        <MintCountdown\n                          key=\"goLive\"\n                          date={getCountdownDate(candyMachine)}\n                          style={{ justifyContent: 'flex-end' }}\n                          status={\n                            candyMachine?.state?.isSoldOut ||\n                            (endDate && Date.now() > endDate.getTime())\n                              ? 'COMPLETED'\n                              : isPresale\n                              ? 'PRESALE'\n                              : 'LIVE'\n                          }\n                          onComplete={toggleMintButton}\n                        />\n                        {isPresale &&\n                          candyMachine.state.goLiveDate &&\n                          candyMachine.state.goLiveDate.toNumber() >\n                            new Date().getTime() / 1000 && (\n                            <Typography\n                              variant=\"caption\"\n                              align=\"center\"\n                              display=\"block\"\n                              style={{ fontWeight: 'bold' }}\n                            >\n                              UNTIL PUBLIC MINT\n                            </Typography>\n                          )}\n                      </>\n                    )}\n                  </Grid>\n                </Grid>\n              )}\n              <MintContainer>\n                {candyMachine?.state.isActive &&\n                candyMachine?.state.gatekeeper &&\n                wallet.publicKey &&\n                wallet.signTransaction ? (\n                  <GatewayProvider\n                    wallet={{\n                      publicKey:\n                        wallet.publicKey ||\n                        new PublicKey(CANDY_MACHINE_PROGRAM),\n                      //@ts-ignore\n                      signTransaction: wallet.signTransaction,\n                    }}\n                    gatekeeperNetwork={\n                      candyMachine?.state?.gatekeeper?.gatekeeperNetwork\n                    }\n                    clusterUrl={rpcUrl}\n                    handleTransaction={async (transaction: Transaction) => {\n                      setIsUserMinting(true);\n                      const userMustSign = transaction.signatures.find(sig =>\n                        sig.publicKey.equals(wallet.publicKey!),\n                      );\n                      if (userMustSign) {\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign one-time Civic Pass issuance',\n                          severity: 'info',\n                        });\n                        try {\n                          transaction = await wallet.signTransaction!(\n                            transaction,\n                          );\n                        } catch (e) {\n                          setAlertState({\n                            open: true,\n                            message: 'User cancelled signing',\n                            severity: 'error',\n                          });\n                          // setTimeout(() => window.location.reload(), 2000);\n                          setIsUserMinting(false);\n                          throw e;\n                        }\n                      } else {\n                        setAlertState({\n                          open: true,\n                          message: 'Refreshing Civic Pass',\n                          severity: 'info',\n                        });\n                      }\n                      try {\n                        await sendTransaction(\n                          props.connection,\n                          wallet,\n                          transaction,\n                          [],\n                          true,\n                          'confirmed',\n                        );\n                        setAlertState({\n                          open: true,\n                          message: 'Please sign minting',\n                          severity: 'info',\n                        });\n                      } catch (e) {\n                        setAlertState({\n                          open: true,\n                          message:\n                            'Solana dropped the transaction, please try again',\n                          severity: 'warning',\n                        });\n                        console.error(e);\n                        // setTimeout(() => window.location.reload(), 2000);\n                        setIsUserMinting(false);\n                        throw e;\n                      }\n                      await onMint();\n                    }}\n                    broadcastTransaction={false}\n                    options={{ autoShowModal: false }}\n                  >\n                    <MintButton\n                      candyMachine={candyMachine}\n                      isMinting={isUserMinting}\n                      setIsMinting={val => setIsUserMinting(val)}\n                      onMint={onMint}\n                      isActive={isActive || (isPresale && isWhitelistUser)}\n                    />\n                  </GatewayProvider>\n                ) : (\n                  <MintButton\n                    candyMachine={candyMachine}\n                    isMinting={isUserMinting}\n                    setIsMinting={val => setIsUserMinting(val)}\n                    onMint={onMint}\n                    isActive={isActive || (isPresale && isWhitelistUser)}\n                  />\n                )}\n              </MintContainer>\n            </>\n          )}\n          <Typography\n            variant=\"caption\"\n            align=\"center\"\n            display=\"block\"\n            style={{ marginTop: 7, color: 'grey' }}\n          >\n            Powered by METAPLEX\n          </Typography>\n        </Paper>\n      </Container>\n\n      <Snackbar\n        open={alertState.open}\n        autoHideDuration={alertState.noHide ? null : 6000}\n        onClose={() => setAlertState({ ...alertState, open: false })}\n      >\n        <Alert\n          onClose={() => setAlertState({ ...alertState, open: false })}\n          severity={alertState.severity}\n        >\n          {alertState.message}\n        </Alert>\n      </Snackbar>\n    </Container>\n  );\n};\n\nconst getCountdownDate = (\n  candyMachine: CandyMachineAccount,\n): Date | undefined => {\n  if (\n    candyMachine.state.isActive &&\n    candyMachine.state.endSettings?.endSettingType.date\n  ) {\n    return toDate(candyMachine.state.endSettings.number);\n  }\n\n  return toDate(\n    candyMachine.state.goLiveDate\n      ? candyMachine.state.goLiveDate\n      : candyMachine.state.isPresale\n      ? new anchor.BN(new Date().getTime() / 1000)\n      : undefined,\n  );\n};\n\nexport default Home;\n"]},"metadata":{},"sourceType":"module"}